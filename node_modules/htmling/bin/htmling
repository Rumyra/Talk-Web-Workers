#!/usr/bin/env node
var packageData = require('../package.json'),
    yargs = require('yargs'),
    argv = yargs
    .usage('\033[1m' + packageData.name + '\033[0m - ' + packageData.description + '\nUsage: htmling [OPTIONS] path/to/folder')
    .options({
      o: {
        alias: 'output',
        describe: 'The file or directory to output to, defaults to STDOUT.',
        default: "-"
      },
      c: {
        alias: 'combine',
        describe: 'Combine the generated templates into a single compile target.',
        boolean: true,
        default: false
      },
      e: {
        alias: 'element',
        describe: 'Register a custom element.'
      },
      v: {
        alias: 'version',
        describe: 'Display the HTMLing version.'
      },
      h: {
        alias: 'help',
        describe: 'Display this help screen.'
      }
    })
    .argv;


if (argv.help) {
  yargs.showHelp();
  return;
}
else if (argv.version) {
  console.log(packageData.name + ' v' + packageData.version);
  return;
}

argv = yargs.demand(1, 'Must specify a source directory.').argv;

var LIB = require('../lib');
var fs = require('fs'),
    path = require('path'),
    mkdirp = require('mkdirp'),
    options = {
      elements: {}
    };

if (argv.element) {
  if (!Array.isArray(argv.element)) {
    argv.element = [argv.element];
  }
  options.elements = argv.element.reduce(function (elements, item) {
    var parts = item.split(':');
    elements[parts[0]] = parts[1];
    return elements;
  }, options.elements);
}

var collection = argv._.reduce(function (collection, filename) {
  if (fs.statSync(filename).isDirectory()) {
    return collection.configure(LIB.dir(filename, options).items);
  }
  else {
    return collection.set(filename, LIB.file(filename, options));
  }
}, new LIB.Collection());

collection.elements = options.elements;

var output = {};

if (argv.combine || argv.output === '-') {
  output[argv.output] = collection.toString();
}
else {
  collection.forEach(function (item, key) {
    output[path.join(argv.output, key)] = item.toString();
  });
}

var keys = Object.keys(output),
    total = keys.length,
    key, i;

for (i = 0; i < total; i++) {
  key = keys[i];
  if (key === '-') {
    console.log(output[key]);
  }
  else {
    mkdirp.sync(path.dirname(key));
    fs.writeFileSync(key.replace(/\.html$/, ".js"), output[key]);
  }
}

